{"version":3,"file":"plugin.cjs","sources":["../../../src/start-manifest-plugin/plugin.ts"],"sourcesContent":["import { readFileSync } from 'node:fs'\nimport path from 'node:path'\nimport { joinURL } from 'ufo'\nimport { rootRouteId } from '@tanstack/router-core'\nimport { VIRTUAL_MODULES } from '@tanstack/start-server-core'\nimport { resolveViteId } from '../utils'\nimport { CLIENT_DIST_DIR } from '../constants'\nimport type {\n  PluginOption,\n  ResolvedConfig,\n  Manifest as ViteManifest,\n  ManifestChunk as ViteManifestChunk,\n} from 'vite'\nimport type { RouterManagedTag } from '@tanstack/router-core'\nimport type { TanStackStartOutputConfig } from '../plugin'\n\nconst getCSSRecursively = (\n  file: ViteManifestChunk,\n  filesByRouteFilePath: ViteManifest,\n  basePath: string,\n) => {\n  const result: Array<RouterManagedTag> = []\n\n  // Get all css imports from the file\n  for (const cssFile of file.css ?? []) {\n    result.push({\n      tag: 'link',\n      attrs: {\n        rel: 'stylesheet',\n        href: joinURL(basePath, cssFile),\n        type: 'text/css',\n      },\n    })\n  }\n\n  // Recursively get CSS from imports\n  for (const imp of file.imports ?? []) {\n    const importInfo = filesByRouteFilePath[imp]\n    if (importInfo) {\n      result.push(\n        ...getCSSRecursively(importInfo, filesByRouteFilePath, basePath),\n      )\n    }\n  }\n\n  return result\n}\n\nconst resolvedModuleId = resolveViteId(VIRTUAL_MODULES.startManifest)\nexport function startManifestPlugin(\n  opts: TanStackStartOutputConfig,\n): PluginOption {\n  let config: ResolvedConfig\n\n  return {\n    name: 'tanstack-start:start-manifest-plugin',\n    enforce: 'pre',\n\n    configResolved(resolvedConfig) {\n      config = resolvedConfig\n    },\n    // configEnvironment(env, envConfig) {\n    //   config = envConfig.\n    // },\n    resolveId: {\n      filter: { id: new RegExp(VIRTUAL_MODULES.startManifest) },\n      handler(id) {\n        if (id === VIRTUAL_MODULES.startManifest) {\n          return resolvedModuleId\n        }\n        return undefined\n      },\n    },\n    load: {\n      filter: {\n        id: new RegExp(resolvedModuleId),\n      },\n      handler(id) {\n        if (id === resolvedModuleId) {\n          if (this.environment.config.consumer !== 'server') {\n            // this will ultimately fail the build if the plugin is used outside the server environment\n            // TODO: do we need special handling for `serve`?\n            return `export default {}`\n          }\n\n          // If we're in development, return a dummy manifest\n          if (config.command === 'serve') {\n            return `export const tsrStartManifest = () => ({\n            routes: {}\n          })`\n          }\n\n          // This is the basepath for the application\n          const APP_BASE = globalThis.TSS_APP_BASE\n\n          const clientViteManifestPath = path.resolve(\n            opts.root,\n            CLIENT_DIST_DIR,\n            '.vite',\n            'manifest.json',\n          )\n\n          let viteManifest: ViteManifest\n          try {\n            viteManifest = JSON.parse(\n              readFileSync(clientViteManifestPath, 'utf-8'),\n            )\n          } catch (err) {\n            console.error(err)\n            throw new Error(\n              `Could not find the production client vite manifest at '${clientViteManifestPath}'!`,\n            )\n          }\n\n          // This the manifest pulled from the generated route tree and later used by the Router.\n          // i.e what's located in `src/generatedRouteTree.gen.ts`\n          const routeTreeRoutes = globalThis.TSS_ROUTES_MANIFEST.routes\n\n          // This is where hydration will start, from when the SSR'd page reaches the browser.\n          // By default, this'd be the virtual entry of `/~start/default-client-entry.tsx`, unless a custom entry is provided.\n          let entryFile: ViteManifestChunk | undefined\n\n          const filesByRouteFilePath: ViteManifest = Object.fromEntries(\n            Object.entries(viteManifest).map(([k, v]) => {\n              if (v.isEntry) {\n                if (entryFile !== undefined) {\n                  console.error(\n                    `multiple entries detected`,\n                    entryFile.file,\n                    v.file,\n                  )\n                }\n                entryFile = v\n              }\n\n              const rPath = k.split('?')[0]\n\n              return [rPath, v]\n            }, {}),\n          )\n\n          const routesDirectoryFromRoot = path.relative(\n            opts.root,\n            opts.tsr.routesDirectory,\n          )\n\n          // Add preloads to the routes from the vite manifest\n          Object.entries(routeTreeRoutes).forEach(([routeId, v]) => {\n            const file =\n              filesByRouteFilePath[\n                path.posix.join(routesDirectoryFromRoot, v.filePath as string)\n              ]\n\n            if (file) {\n              // Map the relevant imports to their route paths,\n              // so that it can be imported in the browser.\n              const preloads = (file.imports ?? []).map((d) => {\n                const assetPath = joinURL(APP_BASE, viteManifest[d]!.file)\n                return assetPath\n              })\n\n              // Since this is the most important JS entry for the route,\n              // it should be moved to the front of the preloads so that\n              // it has the best chance of being loaded first.\n              if (file.file) {\n                preloads.unshift(path.join(APP_BASE, file.file))\n              }\n\n              const cssAssetsList = getCSSRecursively(\n                file,\n                filesByRouteFilePath,\n                APP_BASE,\n              )\n\n              routeTreeRoutes[routeId] = {\n                ...v,\n                assets: [...(v.assets || []), ...cssAssetsList],\n                preloads,\n              }\n            }\n          })\n\n          if (entryFile) {\n            routeTreeRoutes[rootRouteId]!.preloads = [\n              joinURL(APP_BASE, entryFile.file),\n              ...(entryFile.imports?.map((d) =>\n                joinURL(APP_BASE, viteManifest[d]!.file),\n              ) || []),\n            ]\n\n            // Gather all the CSS files from the entry file in\n            // the `css` key and add them to the root route\n            const entryCssAssetsList = getCSSRecursively(\n              entryFile,\n              filesByRouteFilePath,\n              APP_BASE,\n            )\n\n            routeTreeRoutes[rootRouteId]!.assets = [\n              ...(routeTreeRoutes[rootRouteId]!.assets || []),\n              ...entryCssAssetsList,\n              {\n                tag: 'script',\n                attrs: {\n                  src: joinURL(APP_BASE, entryFile.file),\n                  type: 'module',\n                },\n              },\n            ]\n          }\n\n          const recurseRoute = (\n            route: {\n              preloads?: Array<string>\n              children?: Array<any>\n            },\n            seenPreloads = {} as Record<string, true>,\n          ) => {\n            route.preloads = route.preloads?.filter((preload) => {\n              if (seenPreloads[preload]) {\n                return false\n              }\n              seenPreloads[preload] = true\n              return true\n            })\n\n            if (route.children) {\n              route.children.forEach((child) => {\n                const childRoute = routeTreeRoutes[child]!\n                recurseRoute(childRoute, { ...seenPreloads })\n              })\n            }\n          }\n\n          // @ts-expect-error\n          recurseRoute(routeTreeRoutes[rootRouteId])\n\n          const routesManifest = {\n            routes: routeTreeRoutes,\n          }\n\n          return `export const tsrStartManifest = () => (${JSON.stringify(routesManifest)})`\n        }\n\n        return undefined\n      },\n    },\n  }\n}\n"],"names":["joinURL","resolveViteId","VIRTUAL_MODULES","CLIENT_DIST_DIR","readFileSync","rootRouteId","_a"],"mappings":"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"}